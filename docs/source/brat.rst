Brat
----

.. _Brat: https://brat.nlplab.org/standoff.html

`Brat`_ is an open source text annotation tool.
This package provides a Brat adapter to generate Brat annotation files (.ann extension)
in order to visualise iamsystem's annotations in the Brat web interface.

Brat Document
^^^^^^^^^^^^^

The class :ref:`api_doc:BratDocument` can store **Brat entities** and **Brat notes**.
Each entity corresponds to an annotation:

* An ID
* A Brat type that should be declared in Brat's configuration file (annotation.conf)
* start-end offsets
* text substring

.. code-block:: python
    :linenos:
    :emphasize-lines: 8

        from iamsystem import Matcher, Term, BratDocument
        matcher = Matcher()
        term1 = Term(label="North America", code="NA")
        matcher.add_keywords(keywords=[term1])
        text = "North and South America"
        annots = matcher.annot_text(text=text, w=3)
        brat_document = BratDocument()
        brat_document.add_annots(annots, text=text, brat_type="CONTINENT", keyword_attr=None)
        print(str(brat_document))


.. code-block:: pycon

        # T1	CONTINENT 0 5;16 23	North America
        # #1	IAMSYSTEM T1	North America (NA)

The first line is the brat entity, the second is the brat note. T1 is the ID of the brat entity.
Each note is linked to a brat entity by its ID, here T1.
In the brat note, 'North America (NA)' is the comment related to this entity.
By default, this comment is generated by calling the *__str__* method of the :ref:`api_doc:Keyword`.
Here the __str__ method of the :ref:`api_doc:Term` class concatenated the label 'North America' and the code '(NA)'.
You can modify this last value by overriding the *get_note* function of the :ref:`api_doc:BratDocument` class.

Also note that in the above example, the Brat type "CONTINENT" is passed as a parameter and
applies to all annotations.
If you have multiple Brat types, a better way to do this is to store the Brat type
in a :ref:`api_doc:Keyword` subclass attribute and to pass the attribute name to the *add_annots* function:

.. code-block:: python
    :linenos:
    :emphasize-lines: 14

        from iamsystem import Term
        class Entity(Term):
            def __init__(self, label: str, code: str, brat_type: str):
                super().__init__(label, code)
                self.brat_type = brat_type

        from iamsystem import Matcher, BratDocument
        matcher = Matcher()
        term1 = Entity(label="North America", code="NA", brat_type="CONTINENT")
        matcher.add_keywords(keywords=[term1])
        text = "North and South America"
        annots = matcher.annot_text(text=text, w=3)
        brat_document = BratDocument()
        brat_document.add_annots(annots=annots, text=text, keyword_attr='brat_type')
        print(str(brat_document))

.. code-block:: pycon

        # T1	CONTINENT 0 5;16 23	North America
        # #1	IAMSYSTEM T1	North America (NA)

Brat Writer
^^^^^^^^^^^^^

This package provides an utility class to write a :ref:`api_doc:BratDocument`.

.. code-block:: python
    :linenos:
    :emphasize-lines: 11,12

        from iamsystem import Matcher, Term, BratDocument, BratWriter
        matcher = Matcher()
        term1 = Term(label="North America", code="NA")
        matcher.add_keywords(keywords=[term1])
        text = "North and South America"
        annots = matcher.annot_text(text=text, w=3)
        brat_document = BratDocument()
        brat_document.add_annots(annots, text=text, brat_type="CONTINENT")
        filename = "./doc.ann"
        with(open(filename, 'w')) as f:
            BratWriter.saveEntities(brat_entities=brat_document.get_entities(), write=f.write)
            BratWriter.saveNotes(brat_notes=brat_document.get_notes(), write=f.write)
